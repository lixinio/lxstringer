// Code generated by "stringer -type=S41 -code=CodeName -name=Name2 -code2id=S41FromCode -output=example/s41_generate.go example/s4.go"; DO NOT EDIT.

package example

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[S41_1-100]
	_ = x[S41_2-101]
	_ = x[S41_3-102]
}

const (
	_S41CodeName = "A b C中 华啊`啊"
	_S41Name     = "d E f人 们i'm ok"
)

var (
	_S41CodeIndex = [...]uint8{0, 5, 12, 19}
	_S41NameIndex = [...]uint8{0, 5, 12, 18}
)

func (i S41) CodeName() string {
	i -= 100
	if i < 0 || i >= S41(len(_S41CodeIndex)-1) {
		return "S41(" + strconv.FormatInt(int64(i+100), 10) + ")"
	}
	return _S41CodeName[_S41CodeIndex[i]:_S41CodeIndex[i+1]]
}

func (i S41) Name2() string {
	i -= 100
	if i < 0 || i >= S41(len(_S41NameIndex)-1) {
		return "S41(" + strconv.FormatInt(int64(i+100), 10) + ")"
	}
	return _S41Name[_S41NameIndex[i]:_S41NameIndex[i+1]]
}

var _S41Code2IDMap = map[string]S41{
	_S41CodeName[0:5]:   100,
	_S41CodeName[5:12]:  101,
	_S41CodeName[12:19]: 102,
}

func S41FromCode(code string, dftVal S41) S41 {
	if val, ok := _S41Code2IDMap[code]; ok {
		return val
	}
	return dftVal
}
