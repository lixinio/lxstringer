// Code generated by "stringer -type=S31,S32,S33 example/s3.go"; DO NOT EDIT.

package example

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[S31_1-0]
	_ = x[S31_2-2]
	_ = x[S31_3-4]
}

const (
	_S31CodeName_0 = "A b C"
	_S31Name_0     = "d E f"
	_S31CodeName_1 = "中 华"
	_S31Name_1     = "人 们"
	_S31CodeName_2 = "啊`啊"
	_S31Name_2     = "i'm ok"
)

func (i S31) Code() string {
	switch {
	case i == 0:
		return _S31CodeName_0
	case i == 2:
		return _S31CodeName_1
	case i == 4:
		return _S31CodeName_2
	default:
		return "S31(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

func (i S31) Name() string {
	switch {
	case i == 0:
		return _S31Name_0
	case i == 2:
		return _S31Name_1
	case i == 4:
		return _S31Name_2
	default:
		return "S31(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

var _S31Code2IDMap = map[string]S31{
	_S31CodeName_0: 0,
	_S31CodeName_1: 2,
	_S31CodeName_2: 4,
}

func CodeToS31(code string, dftVal S31) S31 {
	if val, ok := _S31Code2IDMap[code]; ok {
		return val
	}
	return dftVal
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[S32_1-100]
	_ = x[S32_2-102]
	_ = x[S32_3-104]
}

const (
	_S32CodeName_0 = "A b C"
	_S32Name_0     = "d E f"
	_S32CodeName_1 = "中 华"
	_S32Name_1     = "人 们"
	_S32CodeName_2 = "啊`啊"
	_S32Name_2     = "i'm ok"
)

func (i S32) Code() string {
	switch {
	case i == 100:
		return _S32CodeName_0
	case i == 102:
		return _S32CodeName_1
	case i == 104:
		return _S32CodeName_2
	default:
		return "S32(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

func (i S32) Name() string {
	switch {
	case i == 100:
		return _S32Name_0
	case i == 102:
		return _S32Name_1
	case i == 104:
		return _S32Name_2
	default:
		return "S32(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

var _S32Code2IDMap = map[string]S32{
	_S32CodeName_0: 100,
	_S32CodeName_1: 102,
	_S32CodeName_2: 104,
}

func CodeToS32(code string, dftVal S32) S32 {
	if val, ok := _S32Code2IDMap[code]; ok {
		return val
	}
	return dftVal
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[S33_1-1]
	_ = x[S33_2-3]
	_ = x[S33_3-6]
	_ = x[S33_4-11]
	_ = x[S33_5-20]
	_ = x[S33_6-37]
	_ = x[S33_7-70]
	_ = x[S33_8-135]
	_ = x[S33_9-264]
	_ = x[S33_10-521]
	_ = x[S33_11-1034]
	_ = x[S33_12-2059]
}

const (
	_S33CodeName = "A b C1中 华1啊`啊1A b C2中 华2啊`啊2A b C3中 华3啊`啊3A b C4中 华4啊`啊4"
	_S33Name     = "d E f人 们i'm okd E f人 们i'm okd E f人 们i'm okd E f人 们i'm ok"
)

var _S33CodeMap = map[S33]string{
	1:    _S33CodeName[0:6],
	3:    _S33CodeName[6:14],
	6:    _S33CodeName[14:22],
	11:   _S33CodeName[22:28],
	20:   _S33CodeName[28:36],
	37:   _S33CodeName[36:44],
	70:   _S33CodeName[44:50],
	135:  _S33CodeName[50:58],
	264:  _S33CodeName[58:66],
	521:  _S33CodeName[66:72],
	1034: _S33CodeName[72:80],
	2059: _S33CodeName[80:88],
}

var _S33NameMap = map[S33]string{
	1:    _S33Name[0:5],
	3:    _S33Name[5:12],
	6:    _S33Name[12:18],
	11:   _S33Name[18:23],
	20:   _S33Name[23:30],
	37:   _S33Name[30:36],
	70:   _S33Name[36:41],
	135:  _S33Name[41:48],
	264:  _S33Name[48:54],
	521:  _S33Name[54:59],
	1034: _S33Name[59:66],
	2059: _S33Name[66:72],
}

func (i S33) Code() string {
	if str, ok := _S33CodeMap[i]; ok {
		return str
	}
	return "S33(" + strconv.FormatInt(int64(i), 10) + ")"
}

func (i S33) Name() string {
	if str, ok := _S33NameMap[i]; ok {
		return str
	}
	return "S33(" + strconv.FormatInt(int64(i), 10) + ")"
}

var _S33Code2IDMap = map[string]S33{
	_S33CodeName[0:6]:   1,
	_S33CodeName[6:14]:  3,
	_S33CodeName[14:22]: 6,
	_S33CodeName[22:28]: 11,
	_S33CodeName[28:36]: 20,
	_S33CodeName[36:44]: 37,
	_S33CodeName[44:50]: 70,
	_S33CodeName[50:58]: 135,
	_S33CodeName[58:66]: 264,
	_S33CodeName[66:72]: 521,
	_S33CodeName[72:80]: 1034,
	_S33CodeName[80:88]: 2059,
}

func CodeToS33(code string, dftVal S33) S33 {
	if val, ok := _S33Code2IDMap[code]; ok {
		return val
	}
	return dftVal
}
