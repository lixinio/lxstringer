// Code generated by "stringer -type=S11 example/s1.go"; DO NOT EDIT.

package example

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[S11_1-0]
	_ = x[S11_2-1]
	_ = x[S11_3-2]
	_ = x[S11_4-3]
}

const (
	_S11CodeName = "A AFD SAFF发 生D"
	_S11Name     = "aaabbbcccDD"
)

var (
	_S11CodeIndex = [...]uint8{0, 3, 9, 17, 18}
	_S11NameIndex = [...]uint8{0, 3, 6, 9, 11}
)

func (i S11) Code() string {
	if i < 0 || i >= S11(len(_S11CodeIndex)-1) {
		return "S11(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _S11CodeName[_S11CodeIndex[i]:_S11CodeIndex[i+1]]
}

func (i S11) Name() string {
	if i < 0 || i >= S11(len(_S11NameIndex)-1) {
		return "S11(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _S11Name[_S11NameIndex[i]:_S11NameIndex[i+1]]
}

var _S11Code2IDMap = map[string]S11{
	_S11CodeName[0:3]:   0,
	_S11CodeName[3:9]:   1,
	_S11CodeName[9:17]:  2,
	_S11CodeName[17:18]: 3,
}

func CodeToS11(code string, dftVal S11) S11 {
	if val, ok := _S11Code2IDMap[code]; ok {
		return val
	}
	return dftVal
}
